#!/usr/bin/env bash
if [[ $# -lt 1 ]] || [[ "$1" == "add" ]]; then
  echo "Usage: mpd-url URL/COMMAND [mpd_host] [mpd_port]"
  echo " - URL: http/https add song via yt-dlp"
  echo " - COMMAND: flush/update/watch"
  exit 1
fi

# If first paramater is URL, use it as src and set cmd to "add"
cmd="${1:-none}"
if [[ $cmd == http* ]]; then
  src="$cmd"
  cmd="add"
fi

# Optional mpd host and port paramaters
mpd_host="${2:-localhost}"
mpd_port="${3:-6600}"

# Directory used for tag cache and playlist ids
dir="$HOME/.cache/mpd-url"
mkdir -p $dir

# Create mpc alias
alias mpc="mpc --host $mpd_host --port $mpd_port"

# Use yt-dlp to fetch url and append src to end as #fragment
# Save result and return cached value if available
fetch_url() {
  local src="$1"
  local flush="${2-noflush}" # flush cache for this src, always fetch fresh
  local file="url_$(echo "$src" | sha256sum | awk '{print $1}')"
  if [[ ! -e $dir/$file || "$flush" == "flush" ]]; then
    echo "$(yt-dlp -g --audio-format=best $src | tail -n1)#${src}" > $dir/$file
  fi
  cat $dir/$file
}

# Use yt-dlp to fetch metadata on two lines
# Save result and return cached value if available
fetch_tag() {
  local src="$1"
  local flush="${2-noflush}" # flush cache for this src, always fetch fresh
  local file="tag_$(echo "$src" | sha256sum | awk '{print $1}')"
  if [[ ! -e $dir/$file || "$flush" == "flush" ]]; then
    yt-dlp -j $src | jq -r '.title, .uploader' > $dir/$file
  fi
  cat $dir/$file
}

# First line of cache
fetch_title() {
  local src="$1"
  local flush="${2-noflush}"
  clean_tag "$(fetch_tag "$src" "$flush" | head -n1)"
}

# Second line of cache
fetch_uploader() {
  local src="$1"
  local flush="${2-noflush}"
  clean_tag "$(fetch_tag "$src" "$flush" | tail -n1)"
}

# Song id from currently playing track (empty if not playing)
playing_id() {
  if [[ "$(mpc status | awk 'NR==2 && /\[playing\]/ {print "playing"}')" == "playing" ]]; then
    mpc -f "%id%" | head -n1
  fi
}

# Song ids of URLs in current playlist used to detect changes
list_ids() {
  mpc playlist -f "%id% %file%" | awk '/https?:\/\//' | sort | awk '{print $1}' 
}

has_id() {
  local id="$1"
  local ids="${2-}"

  # If $ids is empty, return true (id exists)
  [[ -z "$ids" ]] && return 0

  # Check if $id exists as a line in $ids
  if echo "$ids" | grep -Fxq "$id"; then
    echo true  # id exists
  else
    echo false # id does not exist
  fi
}

# Fetch reversed songs in playlist with #http fragment, added to each line as src
list_songs() {
  while read -r pos id url; do
    local src
    src="${url#*#}" # Look for src at end of URL as #fragment
    [[ -z "$src" ]] && src="${url}" # Fallback on URL if src is empty
    echo "${pos} ${id} ${url} ${src}"
  done < <(mpc playlist -f "%position% %id% %file%" | awk '/https?:\/\//') | tac
}

# Replace url with updated value in same position
replace_url() {
  local pos="$1"
  local url="$2"
  local id

  # Add new url to end of playlist
  mpc add "$url"

  # Get new song id
  id="$(mpc playlist -f "%id%" | tail -n1)"

  # Remove expired song from playlist by position
  mpc del $pos

  # Move the newly added song from the bottom back to original position
  mpc move $(mpc playlist -f "%position%" | tail -n1) $pos

  # Echo new song id for replaced url
  echo $id
}

# Get current http status code and content-type from url, return false if expired (or otherwise invalid) for streaming
valid_url() {
  local url="$1"
  local status_code
  local content_type
  curl -sILw "__ %{http_code}\n__ %{content_type}\n" "$url" | awk 'tolower($0) ~ /^__/ {print $2}' > $dir/headers
  status_code="$(cat $dir/headers | head -n1)"
  content_type="$(cat $dir/headers | tail -n1)"
  [[ -z "$content_type" ]] && content_type="text" # default to text if blank
  if [[ "$status_code" == "200" && ! "$content_type" =~ ^text ]]; then
    echo true  # is valid
  else
    echo false # is invalid or expired
  fi
}

# Remove any non-printable characters and clean up text
clean_tag() {
  echo "$1" | awk '{
    gsub(/[^a-zA-Z0-9 ()&\/]/, " ");  # Replace special chars with space
    gsub(/ +/, " ");                  # Collapse multiple spaces
    sub(/^ +/, "");                   # Trim leading spaces
    sub(/ +$/, "");                   # Trim trailing spaces
    sub(/^null$/, "");                # Remove null results
    print $0
  }'
}

# Set metadata for song
set_tag() {
  local id="$1"
  local src="${2-invalid}"
  local title="invalid"
  local uploader="invalid"
  if [[ "$src" != "invalid" ]]; then
    title="$(fetch_title $src)"
    uploader="$(fetch_uploader $src)"
  fi
  (
    echo "cleartagid $id"
    echo "addtagid $id Title \"$title\""
    echo "addtagid $id Album \"$uploader\""
    echo "addtagid $id Artist \"$src\""
    echo "close" 
  ) | nc $mpd_host $mpd_port > /dev/null
}

# Update the playlist, replacing any expired URLs and tagging tracks
update() {
  local flush="${1-noflush}"
  local ids="${2-}"

  # Only allow one instance of this function to run at a time
  if [[ -e "$dir/lock" ]]; then
    echo "locked"
    return
  fi

  # Ensure online before proceeding
  if ! nc -zw1 youtube.com 443; then
    echo "offline"
    return
  fi

  # Force playlist update
  if [[ "$flush" == "flush" ]]; then
    echo "flush" > $dir/playlist
  fi

  # Create lockfile
  touch $dir/lock

  # Loop each http song playlist
  while read -r pos id url src; do

    # Check if this id should be updated
    if [[ "$(has_id "$id" "$ids")" == "true" ]]; then
      echo "url: $url"

      # Fetch new url from src with forced flush
      url="$(fetch_url $src $flush)"

      if [[ "$id" == "$(playing_id)" ]]; then
        echo "-> skipping url change for currently playing track"

        echo "-> tag: $id $src"
        set_tag "$id" "$src"

      elif [[ "$(valid_url "$url")" == "true" ]]; then
        echo "-> replace: $url"
        id="$(replace_url "$pos" "$url")"

        echo "-> tag: $id $src"
        set_tag "$id" "$src"

      else
        echo "-> url fail"
        set_tag $id invalid
      fi
    fi
      
  done < <(list_songs)

  # Remove lockfile when done
  rm -f $dir/lock
  echo "done"

}

# If url provided, add the song to the playlist
if [[ "$cmd" == "add" ]]; then
  echo "add: $src"
  mpc add "$(fetch_url $src)"

# Empty cache
elif [[ "$cmd" == "flush" ]]; then
  rm -f $dir/tag_*
  rm -f $dir/url_*
  echo "flush" > $dir/playlist

# Manually run update, with flushed cache and reset playlist ids
elif [[ "$cmd" == "update" ]]; then
  update flush

# First parameter is "watch", watch for playlist changes
elif [[ "$cmd" == "watch" ]]; then

  # Ensure no lockfile
  rm -f $dir/lock

  # Run update and write new ids
  update flush
  list_ids > $dir/ids

  # Watch for playlist changes
  echo "watching for playlist changes"
  while true; do
    while read; do

      # Get diff of playlist ids and check for any changes
      ids="$(list_ids | diff $dir/ids - | awk '/^>/ {print $2}')"

      # If ids exist, make updates
      if [[ ! -z "$ids" ]]; then
        echo "-> diff: $ids"
        update noflush "$ids"
        list_ids > $dir/ids
      else
        echo "-> no changes"
      fi

    done < <(mpc idle playlist)
    sleep 1
  done

else
  echo "Unknown command"
fi
